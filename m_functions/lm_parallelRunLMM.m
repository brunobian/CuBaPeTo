% parallelRunLMM  run R scripts of LMM through a bash script that
% paralelize it in N cores. This script run nCores time a Rscript under 
% nohup, opening nCores independent processes. Each session will load only
% nFiles / nCores CSV files generated by lm_exportErpCsv.m.
%
% fixEf = char with the fixed effect section for the lmer function
%         i.e. '(freq + pos + pred) * type'  
%
% ranEf = char with the random effect section for the lmer function
%         i.e. '(1|suj) + (1|word)'  
%
% nIter = number of permutation for the Cluster-Based Permutation Test
%
% modType = Model type. 
%           'lmm': run everythin in lmm
%           'lm' : run everythin in lmm
%           'ranef': run original data un lmm, permutations in lm (not
%           implemented yet)
%
% nCores  = Number of cores to parallelize
%
% lm_Conf = config struct from the toolbox

function lm_parallelRunLMM(fixEf, ranEf, nIter, modType, nCores, lm_Conf)
    
% For bash script home is not ~, but $HOME

% Path of time CSV from lm_exportCsv.m
inPath   = strrep(lm_Conf.csvPath, '~', '$HOME');             
% Path for LMM outputs
outPath  = strrep(lm_Conf.lmmOutPath, '~', '$HOME');          
% Path for nohup outputs (outputs during the second plane running)
nohupOut = strrep(lm_Conf.nohupOutPath, '~', '$HOME');        
% Path with custom functions
cstPath  = strrep(lm_Conf.customFunsPath, '~', '$HOME');      
% Path with the R functions: default toolbox/R_functions
rPath    = strrep(lm_Conf.rFunctionsPath, '~', '$HOME');      
% Path where csv with permutation with the location of permutation matrices
perPath  = strrep(lm_Conf.permutationMatPath, '~', '$HOME');  
% Number of time files generated in lm_exportCsv.m
nFiles   = lm_Conf.nTimes;              
% Random factor to permutate within if permutation is across or model
% is lm, perVar = 'across'
perVar   = lm_Conf.permutationVariable; 
% Path with the bash functions: default toolbox/bash_functions
bashPath = lm_Conf.bashPath;                                        

outPath  = [outPath '/'];

% Convert numbers to str
nIterStr  = num2str(nIter);
nCoresStr = num2str(nCores);
nFilesStr = num2str(nFiles);

% Generate the str of commando to be run
sep = ' ';
q = '"';
command = ['sh' sep bashPath 'runParallelCores.sh' sep ...
            q nIterStr  q sep ... args[1]
            q inPath    q sep ... args[2]
            q outPath   q sep ... args[3]
            q modType   q sep ... args[4]
            q rPath     q sep ... args[5]
            q fixEf     q sep ... args[6]
            q ranEf     q sep ... args[7]
            q perPath   q sep ... args[8]
            q perVar    q sep ... args[9]
            q cstPath   q sep ... args[10]
            q nCoresStr q sep ... args[11]
            q nFilesStr q sep ... args[12]
            q nohupOut  q sep ... args[13]
            q num2str(1) q sep ... args[14]
            ];     

% Run the command trough bash
system(command);

end
